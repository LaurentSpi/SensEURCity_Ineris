save(REF_AL01_data, file = paste0(output_dir_RefSensData, "/REF_AL01_data.Rda"))
## two R files with functions to source the SensorIneris_Toolbox.R, usually in the OneDrive - INERIS/SensorIneris/RScript folder
source(choose.files(caption = "Select SensorIneris_Toolbox.R file"))
source(choose.files(caption = "Select uBss and uCi.R file"))
## Define size of the output graphs
WidthTimeplot <- 20
HeightTimeplot <- 18
WidthEtalonnage <- 20
HeightEtalonnage <- 22
path_corr <- "C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/correlation_plots"
path_timeseries <- "C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/timeSeries_plots"
## replace NaN with NA in the subset database
MyDataFrame <- c()
MyDataFrame[is.nan.data.frame(MyDataFrame)] <- NA
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R801_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R802_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R804_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R805_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R811_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R817_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_M802_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_R803_data.Rda")
load("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/after_calibration/REF_AL01_data.Rda")
plots_generator <- function(station_data, station_id, sensor_ids, path_corr, path_timeseries) {
station_id_short <- gsub("_data$", "", station_id)
colors_warehouse <- c("red","black","blue","purple3","green4","gold","pink4")
needed_colors <- colors_warehouse[1:(length(sensor_ids) + 1)]
# graphique de séries temporelles
timePlot(
mydata = station_data,
pollutant = c("PM2.5", paste0("PM2.5_", sensor_ids)), # "Ref.PM2.5", "PM2.5_40499C", "PM2.5_4043B1"
plot.type = "l",
lwd = 1.5,
group = FALSE,
main = "",
ylab = "",
name.pol = c(paste0("PM2.5_FIDAS200_", station_id_short), paste0("PM2.5_PMS5003_", sensor_ids)), # Nom affiché sur le graphique
auto.text = FALSE,
date.format = "%d/%m",
cols = needed_colors, # Utiliser les couleurs dynamiques
key = TRUE,
key.columns = 2,
key.position = "top",
y.relation = "free"
)
dev.copy(png, filename = file.path(path_timeseries, paste0("Time series ", station_id_short, " ", paste(sensor_ids, collapse = "-"), ".png")),
units = "cm", res = 1024, width = WidthTimeplot, height = HeightTimeplot)
dev.off()
# graphiques de corrélation pour chaque capteur
for (sensor_id in sensor_ids) {
Limit.XY <- Etalonnage(
x = station_data[, "PM2.5"],
s_x = NULL,
y = station_data[, paste0("PM2.5_", sensor_id)],
s_y = NULL,
AxisLabelX = paste0("PM2.5_FIDAS200_", station_id_short),
AxisLabelY = paste0("PM2.5_PMS5003_", sensor_id),
Title = "",
Marker = 19,
Couleur = "blue",
ligne = "p",
XY_same = FALSE,
lim = NULL,
steps = c(10, 10),
digitround = NULL,
marges = NULL,
PlotAxis = "s",
OrdonneeOrigine = NULL
)
lines(x= c(min(Limit.XY),max(Limit.XY)), y=c(min(Limit.XY),max(Limit.XY)), type = "l", col = "green4")
mtext(paste0("Line Y=X "), line=-36.3, adj=1, padj=0, col= "green4", cex=1.2)
Cal_Line(
x = station_data[, "PM2.5"],
s_x = NULL,
y = station_data[, paste0("PM2.5_", sensor_id)],
s_y = NULL,
Mod_type = "Linear",
Matrice = NULL,
line_position = -1.3,
Couleur = "red",
Sensor_name = NULL,
f_coef1 = "%.2f",
f_coef2 = "%.2f",
f_R2 = "%.3f",
lim = Limit.XY,
marges = NULL,
Covariates = NULL,
Equation = "RMSE"
)
dev.copy(png, filename = file.path(path_corr, paste0("Correlation ", station_id_short, "-", sensor_id, ".png")),
units = "cm", res = 1024, width = WidthEtalonnage, height = HeightEtalonnage)
dev.off()
}
}
# Liste des stations et capteurs colocalisés
stations_sensors_data_IDs <- list(
"REF_R801_data" = c("40499C", "4043B1"),
"REF_R802_data" = c("4049A6", "4043A7"),
"REF_R804_data" = c("40499F", "4043AE"),
"REF_R805_data" = c("4067B3"),
"REF_R811_data" = c("40642B"),
"REF_R817_data" = c("4047D7"),
"REF_M802_data" = c("4065EA"),
"REF_R803_data" = c("4067BD"),
"REF_AL01_data" = c("4065DA")
)
# Parcourir chaque station et générer les graphiques
for (station_id in names(stations_sensors_data_IDs)) {
sensor_ids <- stations_sensors_data_IDs[[station_id]]
station_data <- get(station_id)
plots_generator(station_data, station_id, sensor_ids, path_corr, path_timeseries)
}
## List of packages to install
Packages <- c("openair")
do.call("library", as.list("openair"))
# Set directory
setwd("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1")
# Import libraries
library(dplyr)
library(data.table)
library(chron)
library(ggplot2)
library(stats)
library(RColorBrewer)
library(stringr)
library(sf) # Chargement de la bibliothèque pour la manipulation spatiale
library(sp)
library(RColorBrewer)
library(fields)
library(tidyr)
# Directory paths
indir   <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/INPUTS/"# path for input directory
outdir  <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/"# path for output directory
outdir2  <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/figs/"# path for output directory
# Load .Rda
load(paste0(outdir,"LCS_df_all_data_clean_groups_outliers.Rda"))
# Load .Rda
load(paste0(outdir,"LCS_df_all_clean_groups_outliers.Rda"))
load(paste0(indir,"ref_df_all.Rda"))
# # Convertir les data.tables en data.frames si nécessaire
ref_df_all <- as.data.frame(ref_df_all)
LCS_df_all_clean <- as.data.frame(LCS_df_all_clean_groups_outliers)
LCS_df_all_clean$PM2.5[which(LCS_df_all_clean$outliers=="outlier")]<-NA
LCS_df_all_clean=LCS_df_all_clean[complete.cases(LCS_df_all_clean$PM2.5),]
#aperçu des deux dataframes
head(ref_df_all)
head(LCS_df_all_clean)
library(dplyr)
ref_df_all <- ref_df_all %>% slice(-5825)
# Identifier les stations de référence uniques
stations <- unique(ref_df_all$ID)
print(stations)
# Filtrer les données pour les capteurs colocalisés
colocated_LCS_df_all_clean <- LCS_df_all_clean %>%
filter(grepl("^ANT_REF", Location.ID))
# Voir les premières lignes du nouveau dataframe
head(colocated_LCS_df_all_clean)
unique(colocated_LCS_df_all_clean$Location.ID)
# Sauvegarder le nouveau dataframe si nécessaire
save(colocated_LCS_df_all_clean, file = paste0(outdir, "df_correlations_timeplots_RefSensData_ALL/colocated_LCS_df_all_clean.Rda"))
# Définir les stations de référence et leurs capteurs colocalisés
stations_sensors <- list(
"ANT_REF_R801" = c("40499C", "4043B1"),
"ANT_REF_R802" = c("4049A6", "4043A7"),
"ANT_REF_R804" = c("40499F", "4043AE"),
"ANT_REF_R805" = c("4067B3"),
"ANT_REF_R811" = c("40642B"),
"ANT_REF_R817" = c("4047D7"),
"ANT_REF_M802" = c("4065EA"),
"ANT_REF_R803" = c("4067BD"),
"ANT_REF_AL01" = c("4065DA")
)
ref_df_all <- ref_df_all %>% rename(date = datetime)
# Fonction pour créer un dataframe pour une station de référence
create_station_df <- function(station_id, sensor_ids, ref_df, cap_df) {
# Filtrer les données pour la station de référence
station_ref_df <- ref_df %>% filter(ID == station_id)
# Fusionner avec les données des capteurs PMS basées sur les timestamps
for (sensor_id in sensor_ids) {
sensor_data <- cap_df %>% filter(ID == paste0("Antwerp_", sensor_id)) %>%
select(datetime, PM2.5) %>% rename(!!paste0("PM2.5_", sensor_id) := PM2.5)
station_ref_df <- inner_join(station_ref_df, sensor_data, by = c("date" = "datetime"))
}
return(station_ref_df)
}
# Créer une liste de dataframes pour chaque station de référence
station_dfs <- lapply(names(stations_sensors), function(station_id) {
create_station_df(station_id, stations_sensors[[station_id]], ref_df_all, colocated_LCS_df_all_clean)
})
rm(list = ls())
## List of packages to install
Packages <- c("openair")
do.call("library", as.list("openair"))
# Set directory
setwd("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1")
# Import libraries
library(dplyr)
library(data.table)
library(chron)
library(ggplot2)
library(stats)
library(RColorBrewer)
library(stringr)
library(sf) # Chargement de la bibliothèque pour la manipulation spatiale
library(sp)
library(RColorBrewer)
library(fields)
library(tidyr)
# Directory paths
indir   <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/INPUTS/"# path for input directory
outdir  <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/"# path for output directory
outdir2  <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/figs/"# path for output directory
# Load .Rda
load(paste0(outdir,"LCS_df_all_clean_groups_outliers.Rda"))
load(paste0(indir,"ref_df_all.Rda"))
# # Convertir les data.tables en data.frames si nécessaire
ref_df_all <- as.data.frame(ref_df_all)
LCS_df_all_clean <- as.data.frame(LCS_df_all_clean_groups_outliers)
LCS_df_all_clean$PM2.5[which(LCS_df_all_clean$outliers=="outlier")]<-NA
LCS_df_all_clean=LCS_df_all_clean[complete.cases(LCS_df_all_clean$PM2.5),]
#aperçu des deux dataframes
head(ref_df_all)
head(LCS_df_all_clean)
library(dplyr)
ref_df_all <- ref_df_all %>% slice(-5825)
# Identifier les stations de référence uniques
stations <- unique(ref_df_all$ID)
print(stations)
# Filtrer les données pour les capteurs colocalisés
colocated_LCS_df_all_clean <- LCS_df_all_clean %>%
filter(grepl("^ANT_REF", Location.ID))
# Voir les premières lignes du nouveau dataframe
head(colocated_LCS_df_all_clean)
unique(colocated_LCS_df_all_clean$Location.ID)
# Sauvegarder le nouveau dataframe si nécessaire
save(colocated_LCS_df_all_clean, file = paste0(outdir, "df_correlations_timeplots_RefSensData_ALL/colocated_LCS_df_all_clean.Rda"))
# Définir les stations de référence et leurs capteurs colocalisés
stations_sensors <- list(
"ANT_REF_R801" = c("40499C", "4043B1"),
"ANT_REF_R802" = c("4049A6", "4043A7"),
"ANT_REF_R804" = c("40499F", "4043AE"),
"ANT_REF_R805" = c("4067B3"),
"ANT_REF_R811" = c("40642B"),
"ANT_REF_R817" = c("4047D7"),
"ANT_REF_M802" = c("4065EA"),
"ANT_REF_R803" = c("4067BD"),
"ANT_REF_AL01" = c("4065DA")
)
# Renommer la colonne datetime en date dans la table de référence
ref_df_all <- dplyr::rename(ref_df_all, date = datetime)
# Fonction pour créer un dataframe pour une station de référence
create_station_df <- function(station_id, sensor_ids, ref_df, cap_df) {
# Filtrer les données pour la station de référence
station_ref_df <- dplyr::filter(ref_df, ID == station_id)
# Fusionner avec les données des capteurs LCS basées sur les timestamps
for (sensor_id in sensor_ids) {
sensor_data <- cap_df %>%
dplyr::filter(ID == paste0("Antwerp_", sensor_id)) %>%
dplyr::select(datetime, PM2.5) %>%
dplyr::rename(!!paste0("PM2.5_", sensor_id) := PM2.5)
station_ref_df <- dplyr::inner_join(station_ref_df, sensor_data, by = c("date" = "datetime"))
}
return(station_ref_df)
}
# Créer une liste de dataframes pour chaque station de référence
station_dfs <- lapply(names(stations_sensors), function(station_id) {
create_station_df(station_id, stations_sensors[[station_id]], ref_df_all, colocated_LCS_df_all_clean)
})
# Nommer les dataframes dans la liste pour les identifier facilement
names(station_dfs) <- lapply(names(stations_sensors), function(station_id) {
paste0("REF_", gsub("ANT_REF_", "", station_id), "_data")
})
# Vérifier un exemple de dataframe créé
head(station_dfs[[1]])
# Répertoire de sortie
output_dir_RefSensData <- "C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL"
# Créer le répertoire de sortie s'il n'existe pas
if (!dir.exists(output_dir_RefSensData)) {
dir.create(output_dir_RefSensData, recursive = TRUE)
}
REF_R801_data <- station_dfs[[1]]
REF_R802_data <- station_dfs[[2]]
REF_R804_data <- station_dfs[[3]]
REF_R805_data <- station_dfs[[4]]
REF_R811_data <- station_dfs[[5]]
REF_R817_data <- station_dfs[[6]]
REF_M802_data <- station_dfs[[7]]
REF_R803_data <- station_dfs[[8]]
REF_AL01_data <- station_dfs[[9]]
save(REF_R801_data, file = paste0(output_dir_RefSensData, "/REF_R801_data.Rda"))
save(REF_R802_data, file = paste0(output_dir_RefSensData, "/REF_R802_data.Rda"))
save(REF_R804_data, file = paste0(output_dir_RefSensData, "/REF_R804_data.Rda"))
save(REF_R805_data, file = paste0(output_dir_RefSensData, "/REF_R805_data.Rda"))
save(REF_R811_data, file = paste0(output_dir_RefSensData, "/REF_R811_data.Rda"))
save(REF_R817_data, file = paste0(output_dir_RefSensData, "/REF_R817_data.Rda"))
save(REF_M802_data, file = paste0(output_dir_RefSensData, "/REF_M802_data.Rda"))
save(REF_R803_data, file = paste0(output_dir_RefSensData, "/REF_R803_data.Rda"))
save(REF_AL01_data, file = paste0(output_dir_RefSensData, "/REF_AL01_data.Rda"))
## two R files with functions to source the SensorIneris_Toolbox.R, usually in the OneDrive - INERIS/SensorIneris/RScript folder
source(choose.files(caption = "Select SensorIneris_Toolbox.R file"))
source(choose.files(caption = "Select uBss and uCi.R file"))
## Define size of the output graphs
WidthTimeplot <- 20
HeightTimeplot <- 18
WidthEtalonnage <- 20
HeightEtalonnage <- 22
path_corr <- "C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/correlation_plots"
path_timeseries <- "C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/df_correlations_timeplots_RefSensData_ALL/timeSeries_plots"
## replace NaN with NA in the subset database
MyDataFrame <- data.frame()
MyDataFrame[is.nan.data.frame(MyDataFrame)] <- NA
plots_generator <- function(station_data, station_id, sensor_ids, path_corr, path_timeseries) {
station_id_short <- gsub("_data$", "", station_id)
# Couleurs dynamiques
colors_warehouse <- c("red", "black", "blue", "purple3", "green4", "gold", "pink4")
needed_colors <- colors_warehouse[1:(length(sensor_ids) + 1)]
## === TIMEPLOT === ##
tryCatch({
windows(width = 10, height = 8)
timePlot(
mydata = station_data,
pollutant = c("PM2.5", paste0("PM2.5_", sensor_ids)),
plot.type = "l",
lwd = 1.5,
group = FALSE,
main = "",
ylab = "",
name.pol = c(paste0("PM2.5_FIDAS200_", station_id_short), paste0("PM2.5_PMS5003_", sensor_ids)),
auto.text = FALSE,
date.format = "%d/%m",
cols = needed_colors,
key = TRUE,
key.columns = 2,
key.position = "top",
y.relation = "free"
)
dev.copy(png, filename = file.path(path_timeseries, paste0("Time series ", station_id_short, " ", paste(sensor_ids, collapse = "-"), ".png")),
units = "cm", res = 1024, width = WidthTimeplot, height = HeightTimeplot)
dev.off()
}, error = function(e) {
message(paste("⚠ Échec timePlot pour", station_id_short, ":", e$message))
})
## === CORRELATION === ##
for (sensor_id in sensor_ids) {
tryCatch({
# Filtrage des zéros
filtered_data <- station_data %>%
filter(PM2.5 > 0, !!sym(paste0("PM2.5_", sensor_id)) > 0)
if (nrow(filtered_data) < 10) {
message(paste("⚠ Trop peu de données valides pour", sensor_id, "à la station", station_id_short))
next
}
windows(width = 10, height = 8)
Limit.XY <- Etalonnage(
x = filtered_data[, "PM2.5"],
s_x = NULL,
y = filtered_data[, paste0("PM2.5_", sensor_id)],
s_y = NULL,
AxisLabelX = paste0("PM2.5_FIDAS200_", station_id_short),
AxisLabelY = paste0("PM2.5_PMS5003_", sensor_id),
Title = "",
Marker = 19,
Couleur = "blue",
ligne = "p",
XY_same = FALSE,
lim = NULL,
steps = c(10, 10),
digitround = NULL,
marges = c(5, 4, 4, 2),  # marges réduites
PlotAxis = "s",
OrdonneeOrigine = NULL
)
# Ligne Y = X
lines(x = c(min(Limit.XY), max(Limit.XY)), y = c(min(Limit.XY), max(Limit.XY)), col = "green4", lty = "dashed")
mtext("Ligne Y = X", line = -36.3, adj = 1, padj = 0, col = "green4", cex = 1.2)
# Régression linéaire
Cal_Line(
x = filtered_data[, "PM2.5"],
s_x = NULL,
y = filtered_data[, paste0("PM2.5_", sensor_id)],
s_y = NULL,
Mod_type = "Linear",
Matrice = NULL,
line_position = -1.3,
Couleur = "red",
Sensor_name = NULL,
f_coef1 = "%.2f",
f_coef2 = "%.2f",
f_R2 = "%.3f",
lim = Limit.XY,
marges = NULL,
Covariates = NULL,
Equation = "RMSE"
)
dev.copy(png, filename = file.path(path_corr, paste0("Correlation ", station_id_short, "-", sensor_id, ".png")),
units = "cm", res = 1024, width = WidthEtalonnage, height = HeightEtalonnage)
dev.off()
}, error = function(e) {
message(paste("⚠ Échec plot correlation pour", sensor_id, "à", station_id_short, ":", e$message))
})
}
}
plots_generator <- function(station_data, station_id, sensor_ids, path_corr, path_timeseries) {
station_id_short <- gsub("_data$", "", station_id)
colors_warehouse <- c("red","black","blue","purple3","green4","gold","pink4")
needed_colors <- colors_warehouse[1:(length(sensor_ids) + 1)]
# graphique de séries temporelles
timePlot(
mydata = station_data,
pollutant = c("PM2.5", paste0("PM2.5_", sensor_ids)), # "Ref.PM2.5", "PM2.5_40499C", "PM2.5_4043B1"
plot.type = "l",
lwd = 1.5,
group = FALSE,
main = "",
ylab = "",
name.pol = c(paste0("PM2.5_FIDAS200_", station_id_short), paste0("PM2.5_PMS5003_", sensor_ids)), # Nom affiché sur le graphique
auto.text = FALSE,
date.format = "%d/%m",
cols = needed_colors, # Utiliser les couleurs dynamiques
key = TRUE,
key.columns = 2,
key.position = "top",
y.relation = "free"
)
dev.copy(png, filename = file.path(path_timeseries, paste0("Time series ", station_id_short, " ", paste(sensor_ids, collapse = "-"), ".png")),
units = "cm", res = 1024, width = WidthTimeplot, height = HeightTimeplot)
dev.off()
# graphiques de corrélation pour chaque capteur
for (sensor_id in sensor_ids) {
Limit.XY <- Etalonnage(
x = station_data[, "PM2.5"],
s_x = NULL,
y = station_data[, paste0("PM2.5_", sensor_id)],
s_y = NULL,
AxisLabelX = paste0("PM2.5_FIDAS200_", station_id_short),
AxisLabelY = paste0("PM2.5_PMS5003_", sensor_id),
Title = "",
Marker = 19,
Couleur = "blue",
ligne = "p",
XY_same = FALSE,
lim = NULL,
steps = c(10, 10),
digitround = NULL,
marges = NULL,
PlotAxis = "s",
OrdonneeOrigine = NULL
)
lines(x= c(min(Limit.XY),max(Limit.XY)), y=c(min(Limit.XY),max(Limit.XY)), type = "l", col = "green4")
mtext(paste0("Line Y=X "), line=-36.3, adj=1, padj=0, col= "green4", cex=1.2)
Cal_Line(
x = station_data[, "PM2.5"],
s_x = NULL,
y = station_data[, paste0("PM2.5_", sensor_id)],
s_y = NULL,
Mod_type = "Linear",
Matrice = NULL,
line_position = -1.3,
Couleur = "red",
Sensor_name = NULL,
f_coef1 = "%.2f",
f_coef2 = "%.2f",
f_R2 = "%.3f",
lim = Limit.XY,
marges = NULL,
Covariates = NULL,
Equation = "RMSE"
)
dev.copy(png, filename = file.path(path_corr, paste0("Correlation ", station_id_short, "-", sensor_id, ".png")),
units = "cm", res = 1024, width = WidthEtalonnage, height = HeightEtalonnage)
dev.off()
}
}
# Liste des stations et capteurs colocalisés
stations_sensors_data_IDs <- list(
"REF_R801_data" = c("40499C", "4043B1"),
"REF_R802_data" = c("4049A6", "4043A7"),
"REF_R804_data" = c("40499F", "4043AE"),
"REF_R805_data" = c("4067B3"),
"REF_R811_data" = c("40642B"),
"REF_R817_data" = c("4047D7"),
"REF_M802_data" = c("4065EA"),
"REF_R803_data" = c("4067BD"),
"REF_AL01_data" = c("4065DA")
)
# Parcourir chaque station et générer les graphiques
for (station_id in names(stations_sensors_data_IDs)) {
sensor_ids <- stations_sensors_data_IDs[[station_id]]
station_data <- get(station_id)
plots_generator(station_data, station_id, sensor_ids, path_corr, path_timeseries)
}
rm(list = ls())
# Set directory
setwd("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/")
# Import libraries
library(dplyr)
library(data.table)
library(chron)
library(ggplot2)
library(stats)
library(RColorBrewer)
library(sf)
# Directory paths
indir   <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/INPUTS/"# path for input directory
outdir  <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/"# path for output directory
outdir2  <-"C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/OUTPUTS/figs/"# path for output directory
# Init variables
loc <-"Netherlands" # estimation location
pol <-"PM25" # pollutant
ref_df_all <- fread("C:/Users/diallo/OneDrive - INERIS/Documents/Ineris1/ALT_SensEURCity/INPUTS/ref_df_all.csv")
save(ref_df_all, file = paste0(indir, "ref_df_all.Rda"))
save(LCS_df_all1, file = paste0(indir, "LCS_df_all.Rda"))
